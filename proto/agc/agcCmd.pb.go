// Code generated by protoc-gen-go. DO NOT EDIT.
// source: agcCmd.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AGCCommand_Code int32

const (
	AGCCommand_NORMAL AGCCommand_Code = 0
	AGCCommand_WARN   AGCCommand_Code = 1
	AGCCommand_ERROR  AGCCommand_Code = 2
)

var AGCCommand_Code_name = map[int32]string{
	0: "NORMAL",
	1: "WARN",
	2: "ERROR",
}

var AGCCommand_Code_value = map[string]int32{
	"NORMAL": 0,
	"WARN":   1,
	"ERROR":  2,
}

func (x AGCCommand_Code) String() string {
	return proto.EnumName(AGCCommand_Code_name, int32(x))
}

func (AGCCommand_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d2e6c0052f3f7546, []int{0, 0}
}

type AGCCommand struct {
	PlcName              string               `protobuf:"bytes,1,opt,name=plc_name,json=plcName,proto3" json:"plc_name,omitempty"`
	RegTime              *timestamp.Timestamp `protobuf:"bytes,2,opt,name=reg_time,json=regTime,proto3" json:"reg_time,omitempty"`
	StName               string               `protobuf:"bytes,3,opt,name=st_name,json=stName,proto3" json:"st_name,omitempty"`
	RegMode              string               `protobuf:"bytes,4,opt,name=reg_mode,json=regMode,proto3" json:"reg_mode,omitempty"`
	CurValue             float32              `protobuf:"fixed32,5,opt,name=cur_value,json=curValue,proto3" json:"cur_value,omitempty"`
	RegValue             float32              `protobuf:"fixed32,6,opt,name=reg_value,json=regValue,proto3" json:"reg_value,omitempty"`
	BasePlc              float32              `protobuf:"fixed32,7,opt,name=base_plc,json=basePlc,proto3" json:"base_plc,omitempty"`
	CheckCode            AGCCommand_Code      `protobuf:"varint,8,opt,name=check_code,json=checkCode,proto3,enum=proto.AGCCommand_Code" json:"check_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *AGCCommand) Reset()         { *m = AGCCommand{} }
func (m *AGCCommand) String() string { return proto.CompactTextString(m) }
func (*AGCCommand) ProtoMessage()    {}
func (*AGCCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2e6c0052f3f7546, []int{0}
}

func (m *AGCCommand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AGCCommand.Unmarshal(m, b)
}
func (m *AGCCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AGCCommand.Marshal(b, m, deterministic)
}
func (m *AGCCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AGCCommand.Merge(m, src)
}
func (m *AGCCommand) XXX_Size() int {
	return xxx_messageInfo_AGCCommand.Size(m)
}
func (m *AGCCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_AGCCommand.DiscardUnknown(m)
}

var xxx_messageInfo_AGCCommand proto.InternalMessageInfo

func (m *AGCCommand) GetPlcName() string {
	if m != nil {
		return m.PlcName
	}
	return ""
}

func (m *AGCCommand) GetRegTime() *timestamp.Timestamp {
	if m != nil {
		return m.RegTime
	}
	return nil
}

func (m *AGCCommand) GetStName() string {
	if m != nil {
		return m.StName
	}
	return ""
}

func (m *AGCCommand) GetRegMode() string {
	if m != nil {
		return m.RegMode
	}
	return ""
}

func (m *AGCCommand) GetCurValue() float32 {
	if m != nil {
		return m.CurValue
	}
	return 0
}

func (m *AGCCommand) GetRegValue() float32 {
	if m != nil {
		return m.RegValue
	}
	return 0
}

func (m *AGCCommand) GetBasePlc() float32 {
	if m != nil {
		return m.BasePlc
	}
	return 0
}

func (m *AGCCommand) GetCheckCode() AGCCommand_Code {
	if m != nil {
		return m.CheckCode
	}
	return AGCCommand_NORMAL
}

type InvokeAGCCommandRequest struct {
	UserId               string        `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AgcCmds              []*AGCCommand `protobuf:"bytes,2,rep,name=agc_cmds,json=agcCmds,proto3" json:"agc_cmds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *InvokeAGCCommandRequest) Reset()         { *m = InvokeAGCCommandRequest{} }
func (m *InvokeAGCCommandRequest) String() string { return proto.CompactTextString(m) }
func (*InvokeAGCCommandRequest) ProtoMessage()    {}
func (*InvokeAGCCommandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2e6c0052f3f7546, []int{1}
}

func (m *InvokeAGCCommandRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvokeAGCCommandRequest.Unmarshal(m, b)
}
func (m *InvokeAGCCommandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvokeAGCCommandRequest.Marshal(b, m, deterministic)
}
func (m *InvokeAGCCommandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvokeAGCCommandRequest.Merge(m, src)
}
func (m *InvokeAGCCommandRequest) XXX_Size() int {
	return xxx_messageInfo_InvokeAGCCommandRequest.Size(m)
}
func (m *InvokeAGCCommandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InvokeAGCCommandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InvokeAGCCommandRequest proto.InternalMessageInfo

func (m *InvokeAGCCommandRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *InvokeAGCCommandRequest) GetAgcCmds() []*AGCCommand {
	if m != nil {
		return m.AgcCmds
	}
	return nil
}

type InvokeResponse struct {
	InvokeResults        []*InvokeResult `protobuf:"bytes,1,rep,name=invokeResults,proto3" json:"invokeResults,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *InvokeResponse) Reset()         { *m = InvokeResponse{} }
func (m *InvokeResponse) String() string { return proto.CompactTextString(m) }
func (*InvokeResponse) ProtoMessage()    {}
func (*InvokeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2e6c0052f3f7546, []int{2}
}

func (m *InvokeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvokeResponse.Unmarshal(m, b)
}
func (m *InvokeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvokeResponse.Marshal(b, m, deterministic)
}
func (m *InvokeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvokeResponse.Merge(m, src)
}
func (m *InvokeResponse) XXX_Size() int {
	return xxx_messageInfo_InvokeResponse.Size(m)
}
func (m *InvokeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InvokeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InvokeResponse proto.InternalMessageInfo

func (m *InvokeResponse) GetInvokeResults() []*InvokeResult {
	if m != nil {
		return m.InvokeResults
	}
	return nil
}

type InvokeResult struct {
	Ret                  bool                 `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Key                  string               `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	TxId                 string               `protobuf:"bytes,3,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	InvokeTime           *timestamp.Timestamp `protobuf:"bytes,4,opt,name=invoke_time,json=invokeTime,proto3" json:"invoke_time,omitempty"`
	ErrMsg               string               `protobuf:"bytes,5,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *InvokeResult) Reset()         { *m = InvokeResult{} }
func (m *InvokeResult) String() string { return proto.CompactTextString(m) }
func (*InvokeResult) ProtoMessage()    {}
func (*InvokeResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2e6c0052f3f7546, []int{3}
}

func (m *InvokeResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvokeResult.Unmarshal(m, b)
}
func (m *InvokeResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvokeResult.Marshal(b, m, deterministic)
}
func (m *InvokeResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvokeResult.Merge(m, src)
}
func (m *InvokeResult) XXX_Size() int {
	return xxx_messageInfo_InvokeResult.Size(m)
}
func (m *InvokeResult) XXX_DiscardUnknown() {
	xxx_messageInfo_InvokeResult.DiscardUnknown(m)
}

var xxx_messageInfo_InvokeResult proto.InternalMessageInfo

func (m *InvokeResult) GetRet() bool {
	if m != nil {
		return m.Ret
	}
	return false
}

func (m *InvokeResult) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *InvokeResult) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *InvokeResult) GetInvokeTime() *timestamp.Timestamp {
	if m != nil {
		return m.InvokeTime
	}
	return nil
}

func (m *InvokeResult) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type QueryAGCCommandRequest struct {
	UserId               string               `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StartTime            *timestamp.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              *timestamp.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	PlcName              string               `protobuf:"bytes,4,opt,name=plc_name,json=plcName,proto3" json:"plc_name,omitempty"`
	StName               string               `protobuf:"bytes,5,opt,name=st_name,json=stName,proto3" json:"st_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *QueryAGCCommandRequest) Reset()         { *m = QueryAGCCommandRequest{} }
func (m *QueryAGCCommandRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAGCCommandRequest) ProtoMessage()    {}
func (*QueryAGCCommandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2e6c0052f3f7546, []int{4}
}

func (m *QueryAGCCommandRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryAGCCommandRequest.Unmarshal(m, b)
}
func (m *QueryAGCCommandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryAGCCommandRequest.Marshal(b, m, deterministic)
}
func (m *QueryAGCCommandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAGCCommandRequest.Merge(m, src)
}
func (m *QueryAGCCommandRequest) XXX_Size() int {
	return xxx_messageInfo_QueryAGCCommandRequest.Size(m)
}
func (m *QueryAGCCommandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAGCCommandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAGCCommandRequest proto.InternalMessageInfo

func (m *QueryAGCCommandRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *QueryAGCCommandRequest) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *QueryAGCCommandRequest) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *QueryAGCCommandRequest) GetPlcName() string {
	if m != nil {
		return m.PlcName
	}
	return ""
}

func (m *QueryAGCCommandRequest) GetStName() string {
	if m != nil {
		return m.StName
	}
	return ""
}

type QueryAGCCommandResponse struct {
	AgcCmds              []*AGCCommand `protobuf:"bytes,1,rep,name=agc_cmds,json=agcCmds,proto3" json:"agc_cmds,omitempty"`
	ErrMsg               string        `protobuf:"bytes,2,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *QueryAGCCommandResponse) Reset()         { *m = QueryAGCCommandResponse{} }
func (m *QueryAGCCommandResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAGCCommandResponse) ProtoMessage()    {}
func (*QueryAGCCommandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2e6c0052f3f7546, []int{5}
}

func (m *QueryAGCCommandResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryAGCCommandResponse.Unmarshal(m, b)
}
func (m *QueryAGCCommandResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryAGCCommandResponse.Marshal(b, m, deterministic)
}
func (m *QueryAGCCommandResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAGCCommandResponse.Merge(m, src)
}
func (m *QueryAGCCommandResponse) XXX_Size() int {
	return xxx_messageInfo_QueryAGCCommandResponse.Size(m)
}
func (m *QueryAGCCommandResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAGCCommandResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAGCCommandResponse proto.InternalMessageInfo

func (m *QueryAGCCommandResponse) GetAgcCmds() []*AGCCommand {
	if m != nil {
		return m.AgcCmds
	}
	return nil
}

func (m *QueryAGCCommandResponse) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func init() {
	proto.RegisterEnum("proto.AGCCommand_Code", AGCCommand_Code_name, AGCCommand_Code_value)
	proto.RegisterType((*AGCCommand)(nil), "proto.AGCCommand")
	proto.RegisterType((*InvokeAGCCommandRequest)(nil), "proto.InvokeAGCCommandRequest")
	proto.RegisterType((*InvokeResponse)(nil), "proto.InvokeResponse")
	proto.RegisterType((*InvokeResult)(nil), "proto.InvokeResult")
	proto.RegisterType((*QueryAGCCommandRequest)(nil), "proto.QueryAGCCommandRequest")
	proto.RegisterType((*QueryAGCCommandResponse)(nil), "proto.QueryAGCCommandResponse")
}

func init() { proto.RegisterFile("agcCmd.proto", fileDescriptor_d2e6c0052f3f7546) }

var fileDescriptor_d2e6c0052f3f7546 = []byte{
	// 619 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x5d, 0x6e, 0xd3, 0x4c,
	0x14, 0xfd, 0x9c, 0x3f, 0xdb, 0xb7, 0xfd, 0x4a, 0x3a, 0x15, 0xad, 0x9b, 0x8a, 0x12, 0xe5, 0x85,
	0x3c, 0x20, 0x57, 0x0a, 0xaa, 0x44, 0xd5, 0xa7, 0x36, 0x42, 0x28, 0x82, 0xfe, 0x30, 0x20, 0x90,
	0x78, 0x31, 0xee, 0xf8, 0xe2, 0x5a, 0xf1, 0x5f, 0x67, 0xc6, 0x55, 0xbb, 0x18, 0xf6, 0xc0, 0x2e,
	0x58, 0x02, 0xdb, 0x41, 0x33, 0x93, 0xa8, 0x4e, 0x03, 0x2a, 0x3c, 0xcd, 0x5c, 0x9f, 0x3b, 0x67,
	0xce, 0xdc, 0x73, 0x0c, 0xab, 0x61, 0xcc, 0xc6, 0x59, 0xe4, 0x97, 0xbc, 0x90, 0x05, 0x69, 0xeb,
	0xa5, 0xf7, 0x34, 0x2e, 0x8a, 0x38, 0xc5, 0x3d, 0x5d, 0x5d, 0x54, 0x5f, 0xf7, 0x64, 0x92, 0xa1,
	0x90, 0x61, 0x56, 0x9a, 0xbe, 0xc1, 0x8f, 0x06, 0xc0, 0xd1, 0xeb, 0xf1, 0xb8, 0xc8, 0xb2, 0x30,
	0x8f, 0xc8, 0x36, 0x38, 0x65, 0xca, 0x82, 0x3c, 0xcc, 0xd0, 0xb3, 0xfa, 0xd6, 0xd0, 0xa5, 0x76,
	0x99, 0xb2, 0xd3, 0x30, 0x43, 0xb2, 0x0f, 0x0e, 0xc7, 0x38, 0x50, 0x04, 0x5e, 0xa3, 0x6f, 0x0d,
	0x57, 0x46, 0x3d, 0xdf, 0xb0, 0xfb, 0x73, 0x76, 0xff, 0xc3, 0x9c, 0x9d, 0xda, 0x1c, 0x63, 0x55,
	0x91, 0x2d, 0xb0, 0x85, 0x34, 0x84, 0x4d, 0x4d, 0xd8, 0x11, 0x52, 0xf3, 0x6d, 0x1b, 0xbe, 0xac,
	0x88, 0xd0, 0x6b, 0x99, 0xab, 0x38, 0xc6, 0x27, 0x45, 0x84, 0x64, 0x07, 0x5c, 0x56, 0xf1, 0xe0,
	0x3a, 0x4c, 0x2b, 0xf4, 0xda, 0x7d, 0x6b, 0xd8, 0xa0, 0x0e, 0xab, 0xf8, 0x47, 0x55, 0x2b, 0x50,
	0x9d, 0x33, 0x60, 0xc7, 0x80, 0x1c, 0x63, 0x03, 0x6e, 0x83, 0x73, 0x11, 0x0a, 0x0c, 0xca, 0x94,
	0x79, 0xb6, 0xc6, 0x6c, 0x55, 0x9f, 0xa7, 0x8c, 0xec, 0x03, 0xb0, 0x4b, 0x64, 0xd3, 0x80, 0xa9,
	0x1b, 0x9d, 0xbe, 0x35, 0x5c, 0x1b, 0x6d, 0x1a, 0xe9, 0xfe, 0xdd, 0x04, 0xfc, 0x71, 0x11, 0x21,
	0x75, 0x75, 0xa7, 0xda, 0x0e, 0x9e, 0x41, 0x4b, 0xad, 0x04, 0xa0, 0x73, 0x7a, 0x46, 0x4f, 0x8e,
	0xde, 0x76, 0xff, 0x23, 0x0e, 0xb4, 0x3e, 0x1d, 0xd1, 0xd3, 0xae, 0x45, 0x5c, 0x68, 0xbf, 0xa2,
	0xf4, 0x8c, 0x76, 0x1b, 0x83, 0x2f, 0xb0, 0x35, 0xc9, 0xaf, 0x8b, 0x29, 0xde, 0x91, 0x51, 0xbc,
	0xaa, 0x50, 0x48, 0x35, 0x83, 0x4a, 0x20, 0x0f, 0x92, 0x68, 0x36, 0xd4, 0x8e, 0x2a, 0x27, 0x11,
	0x79, 0x0e, 0x4e, 0x18, 0xb3, 0x80, 0x65, 0x91, 0xf0, 0x1a, 0xfd, 0xe6, 0x70, 0x65, 0xb4, 0xbe,
	0xa4, 0x88, 0xda, 0xc6, 0x58, 0x31, 0x78, 0x03, 0x6b, 0xe6, 0x06, 0x8a, 0xa2, 0x2c, 0x72, 0x81,
	0xe4, 0x00, 0xfe, 0x4f, 0xe6, 0x5f, 0xaa, 0x54, 0x0a, 0xcf, 0xd2, 0x24, 0x1b, 0x33, 0x92, 0x49,
	0x0d, 0xa3, 0x8b, 0x9d, 0x83, 0x6f, 0x16, 0xac, 0xd6, 0x71, 0xd2, 0x85, 0x26, 0x47, 0xa9, 0x05,
	0x3a, 0x54, 0x6d, 0xd5, 0x97, 0x29, 0xde, 0x6a, 0xb3, 0x5d, 0xaa, 0xb6, 0x64, 0x03, 0xda, 0xf2,
	0x46, 0x3d, 0xc3, 0x58, 0xd9, 0x92, 0x37, 0x93, 0x88, 0x1c, 0xc2, 0x8a, 0xa1, 0x36, 0xd9, 0x68,
	0x3d, 0x98, 0x0d, 0x30, 0xed, 0xf3, 0x78, 0x20, 0xe7, 0x41, 0x26, 0x62, 0x6d, 0xb4, 0x4b, 0x3b,
	0xc8, 0xf9, 0x89, 0x88, 0x07, 0x3f, 0x2d, 0xd8, 0x7c, 0x57, 0x21, 0xbf, 0xfd, 0x87, 0x71, 0x1e,
	0x00, 0x08, 0x19, 0x72, 0xf9, 0xb7, 0x21, 0x75, 0x75, 0xb7, 0xd6, 0xb1, 0x0f, 0x0e, 0xe6, 0x91,
	0x39, 0xd8, 0x7c, 0x38, 0xdd, 0x98, 0x47, 0xfa, 0x58, 0xfd, 0x7f, 0x69, 0x2d, 0xfe, 0x2f, 0xb5,
	0xe0, 0xb7, 0xeb, 0xc1, 0x57, 0x41, 0x59, 0x7a, 0xd8, 0xcc, 0xcf, 0x7a, 0x1e, 0xac, 0x87, 0xf2,
	0x50, 0x9f, 0x5d, 0xa3, 0x3e, 0xbb, 0xd1, 0x77, 0x0b, 0xd6, 0x8f, 0xd3, 0x82, 0x4d, 0xc7, 0x97,
	0x61, 0x92, 0xbf, 0x47, 0x7e, 0x9d, 0x30, 0x24, 0x13, 0xe8, 0x26, 0xf7, 0x02, 0x4a, 0x76, 0x17,
	0x92, 0xb2, 0x34, 0xea, 0xde, 0xe3, 0xfb, 0x49, 0x32, 0x3a, 0xcf, 0xe1, 0xd1, 0xd5, 0xe2, 0x13,
	0xc8, 0x93, 0x59, 0xe7, 0xef, 0x3d, 0xeb, 0xed, 0xfe, 0x09, 0x36, 0x8c, 0xc7, 0x2f, 0x61, 0x87,
	0x15, 0x99, 0x9f, 0x87, 0x3c, 0xf1, 0xcb, 0x4c, 0xf8, 0x17, 0x4a, 0x3e, 0x53, 0xf2, 0x7d, 0x5e,
	0xb2, 0xe3, 0x25, 0xe5, 0x9f, 0x6d, 0xff, 0xd0, 0x18, 0xd3, 0xd1, 0xcb, 0x8b, 0x5f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x47, 0x1e, 0x4c, 0x86, 0x00, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BlockChainServiceClient is the client API for BlockChainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlockChainServiceClient interface {
	InvokeAGCCommand(ctx context.Context, in *InvokeAGCCommandRequest, opts ...grpc.CallOption) (*InvokeResponse, error)
	QueryAGCCommand(ctx context.Context, in *QueryAGCCommandRequest, opts ...grpc.CallOption) (*QueryAGCCommandResponse, error)
}

type blockChainServiceClient struct {
	cc *grpc.ClientConn
}

func NewBlockChainServiceClient(cc *grpc.ClientConn) BlockChainServiceClient {
	return &blockChainServiceClient{cc}
}

func (c *blockChainServiceClient) InvokeAGCCommand(ctx context.Context, in *InvokeAGCCommandRequest, opts ...grpc.CallOption) (*InvokeResponse, error) {
	out := new(InvokeResponse)
	err := c.cc.Invoke(ctx, "/proto.BlockChainService/invokeAGCCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainServiceClient) QueryAGCCommand(ctx context.Context, in *QueryAGCCommandRequest, opts ...grpc.CallOption) (*QueryAGCCommandResponse, error) {
	out := new(QueryAGCCommandResponse)
	err := c.cc.Invoke(ctx, "/proto.BlockChainService/queryAGCCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockChainServiceServer is the server API for BlockChainService service.
type BlockChainServiceServer interface {
	InvokeAGCCommand(context.Context, *InvokeAGCCommandRequest) (*InvokeResponse, error)
	QueryAGCCommand(context.Context, *QueryAGCCommandRequest) (*QueryAGCCommandResponse, error)
}

func RegisterBlockChainServiceServer(s *grpc.Server, srv BlockChainServiceServer) {
	s.RegisterService(&_BlockChainService_serviceDesc, srv)
}

func _BlockChainService_InvokeAGCCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeAGCCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServiceServer).InvokeAGCCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BlockChainService/InvokeAGCCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServiceServer).InvokeAGCCommand(ctx, req.(*InvokeAGCCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainService_QueryAGCCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAGCCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServiceServer).QueryAGCCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BlockChainService/QueryAGCCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServiceServer).QueryAGCCommand(ctx, req.(*QueryAGCCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlockChainService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BlockChainService",
	HandlerType: (*BlockChainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "invokeAGCCommand",
			Handler:    _BlockChainService_InvokeAGCCommand_Handler,
		},
		{
			MethodName: "queryAGCCommand",
			Handler:    _BlockChainService_QueryAGCCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agcCmd.proto",
}
